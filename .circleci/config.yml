version: 2.1


# - Scalar variables -
scalar-1: &node_modules_cache_key aurelia-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}

scalar-2: &working_dir ~/repo

# - Map variables -
map-1: &package_globs
  paths:
    - dist
    - packages/*/dist
    - packages/*/node_modules

map-2: &filter_ignore_develop_release
  filters:
    branches:
      ignore:
        - develop
        - release

map-3: &filter_only_master
  filters:
    branches:
      only:
        - master

# - Executors -
executors:

  docker-circleci:
    parameters:
      node:
        type: string
        default: "10.12"
    working_directory: *working_dir
    docker:
      - image: "circleci/node:<< parameters.node >>-stretch-browsers"

  docker-aurelia:
    working_directory: *working_dir
    docker:
      - image: "aureliaeffect/circleci-v2:latest"


# - Commands -
commands:

  # first_* commands are initializers for jobs, they must come first
  first_npm_install:
    description: "Run npm install"
    steps:
      - checkout
      - run:
          name: "Run npm install"
          command: npm ci --ignore-scripts

  # implies first_npm_install
  first_restore_cache:
    description: "Restore node_modules from cache"
    steps:
      - checkout
      - restore_cache:
          key: *node_modules_cache_key

  # implies first_restore_cache
  first_attach_workspace:
    description: "Attach persisted packages from workspace"
    steps:
      - first_restore_cache
      - attach_workspace:
          at: *working_dir

  # first_* commands are finalizers for jobs, they must come last
  last_save_cache:
    description: "Save node_modules to cache"
    steps:
      - save_cache:
          key: *node_modules_cache_key
          paths:
            - node_modules

  last_persist_workspace:
    description: "Persist packages to workspace"
    steps:
      - persist_to_workspace:
          root: *working_dir
          <<: *package_globs

  # do_* commands are arbitrary commands that run in-between first and last
  do_build_packages:
    description: "Bootstrap and build packages"
    steps:
      - run:
          name: "Bootstrap and build packages"
          command: |
            npm run bootstrap
            npm run build

  do_bundle_packages:
    description: "Bundle packages"
    steps:
      - run:
          name: "Bundle packages"
          command: npm run bundle:all

  do_lint_packages:
    description: "Lint packages"
    steps:
      - run:
          name: "Lint packages"
          command: npm run lint

  do_git_set_config:
    description: "Set git config"
    parameters:
      user_email:
        type: string
        default: \"\"
      user_name:
        type: string
        default: "circleci"
    steps:
      - run:
          name: "Set git config user.name"
          command: git config --local user.name "<< parameters.user_name >>"
      - when:
          condition: << parameters.user_email >>
          steps:
            - run:
                name: "Set git config user.email"
                command: git config --local user.email "<< parameters.user_email >>"

  do_git_stash_dist:
    description: "Stash dist folders"
    steps:
      - run:
          name: "Cleanup unwanted files"
          command: |
            ./node_modules/.bin/lerna clean -y
            rm -rf dist/*.map dist/*.ts dist/*/ packages/*/dist/build/**
      - run:
          name: "Stash dist folders"
          command: |
            git add packages/\*/dist/* dist --force
            git stash

  do_git_commit_dist:
    description: "Commit dist folders"
    parameters:
      message:
        type: string
        default: "chore(all): add latest build artifacts"
    steps:
      - run:
          name: "Overwrite existing with stashed dist folders"
          command: |
            rm -rf packages/*/dist dist
            git add .
            git stash pop
            git add packages/\*/dist/* dist --force
      - run:
          name: "Commit dist folders"
          command: git commit --allow-empty -m "<< parameters.message >>"

  do_git_merge:
    description: "Git merge"
    parameters:
      from:
        type: string
        default: "master"
      to:
        type: string
    steps:
      - run:
          name: "Merge << parameters.from >> into << parameters.to >>"
          command: |
            git checkout << parameters.to >>
            git merge << parameters.from >> --no-ff --no-edit -Xtheirs

  do_git_push:
    description: "Git push"
    parameters:
      to:
        type: string
    steps:
      - run:
          name: "Push << parameters.to >>"
          command: git push origin << parameters.to >>

  do_unit_tests_chrome:
    description: "Run unit tests in chrome"
    steps:
      - run:
          name: "Run unit tests in chrome"
          command: npm run test

  do_unit_tests_firefox:
    description: "Run unit tests in firefox"
    steps:
      - run:
          name: "Run unit tests in firefox"
          command: npm run test-firefox

# - Jobs -
jobs:

  # Must come before any other job
  install_root:
    executor: docker-circleci
    steps:
      - first_npm_install
      - last_save_cache

  # Requires install_root
  build_packages:
    executor: docker-circleci
    steps:
      - first_restore_cache
      - do_build_packages
      - last_persist_workspace

  # Requires install_root
  lint_packages:
    executor: docker-circleci
    steps:
      - first_restore_cache
      - do_lint_packages

  # Requires build_packages
  bundle_packages:
    executor: docker-circleci
    steps:
      - first_attach_workspace
      - do_bundle_packages
      - last_persist_workspace

  # Requires bundle_packages
  merge_and_dist:
    executor: docker-circleci
    parameters:
      to:
        type: string
    steps:
      - first_attach_workspace
      - do_git_set_config
      - do_git_stash_dist
      - do_git_merge:
          to: << parameters.to >>
      - do_git_commit_dist
      - do_git_push:
          to: << parameters.to >>

  # Requires install_root
  unit_test:
    parameters:
      coverage:
        type: boolean
        default: true
      npm_command:
        type: string
        default: "test"
    steps:
      - first_restore_cache
      - run: npm run << parameters.npm_command >>
      - when:
          condition: << parameters.coverage >>
          steps:
            # - run:
            #     name: Process coverage results for Code Climate
            #     command: |
            #       ~/cc-test-reporter format-coverage ~/repo/coverage/lcov.info -t lcov -o ~/repo/coverage/cc-final.json
            #       ~/cc-test-reporter upload-coverage -i ~/repo/coverage/cc-final.json
            #     environment:
            #       CC_TEST_REPORTER_ID: 29ad19bd108faacbd91b36265a5b5e891b404571ebf937f40655157877aa71a1
            #     when: always
            # - run:
            #     name: Process coverage for Codecov
            #     command: |
            #       codecov -f ~/repo/coverage/coverage-final.json
            #     when: always
            - store_test_results:
                path: ~/repo/coverage
            - store_artifacts:
                path: ~/repo/coverage

# - Workflows -
workflows:
  build_test_dev:
    jobs:
      - install_root:
          <<: *filter_ignore_develop_release
      - build_packages:
          <<: *filter_ignore_develop_release
          requires:
            - install_root
      - lint_packages:
          <<: *filter_ignore_develop_release
          requires:
            - install_root
      - unit_test:
          <<: *filter_ignore_develop_release
          requires:
            - install_root
      - bundle_packages:
          <<: *filter_only_master
          requires:
            - build_packages
      - merge_and_dist:
          <<: *filter_only_master
          to: develop
          requires:
            - lint_packages
            - bundle_packages

  # wf2:
  #   triggers:
  #     - schedule:
  #         cron: "0 * * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master

  #   jobs:
  #     - job1:
  #         job1p1: "from wf2"
