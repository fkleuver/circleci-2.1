version: 2.1


# - Scalar variables -
scalar-1: &node_modules_cache_key aurelia-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}

scalar-2: &working_dir ~/repo

# - Map variables -
map-1: &package_globs
  paths:
    - dist
    - packages/*/dist
    - packages/*/node_modules

# - Executors -
executors:

  docker-circleci:
    working_directory: *working_dir
    docker:
      - image: "circleci/node:10.12-stretch-browsers"

  docker-aurelia:
    working_directory: *working_dir
    docker:
      - image: "aureliaeffect/circleci-v2:latest"


# - Commands -
commands:

  # first_* commands are initializers for jobs, they must come first
  first_npm_install:
    description: "Run npm install"
    steps:
      - checkout
      - run:
          name: "Run npm install"
          command: npm ci --ignore-scripts

  # implies first_npm_install
  first_restore_cache:
    description: "Restore node_modules from cache"
    steps:
      - checkout
      - restore_cache:
          key: *node_modules_cache_key

  # implies first_restore_cache
  first_attach_workspace:
    description: "Attach persisted packages from workspace"
    steps:
      - first_restore_cache
      - attach_workspace:
          at: *working_dir

  # first_* commands are finalizers for jobs, they must come last
  last_save_cache:
    description: "Save node_modules to cache"
    steps:
      - save_cache:
          key: *node_modules_cache_key
          paths:
            - node_modules

  last_persist_workspace:
    description: "Persist packages to workspace"
    steps:
      - persist_to_workspace:
          root: *working_dir
          <<: *package_globs

  # do_* commands are arbitrary commands that run in-between first and last
  do_build_packages:
    description: "Bootstrap and build packages"
    steps:
      - run:
          name: "Bootstrap packages"
          command: npm run bootstrap
      - run:
          name: "Build packages"
          command: npm run build

  do_bundle_packages:
    description: "Bundle packages"
    steps:
      - run:
          name: "Bundle packages"
          command: npm run bundle:all

  do_lint_packages:
    description: "Lint packages"
    steps:
      - run:
          name: "Lint packages"
          command: npm run lint

  do_git_set_config:
    description: "Set git config"
    parameters:
      user_email:
        type: string
        default: "fred@avurad.nl"
      user_name:
        type: string
        default: "fkleuver"
    steps:
      - run:
          name: "Set git config"
          command: |
            git config --global user.email "<< parameters.user_email >>"
            git config --global user.name "<< parameters.user_name >>"

  do_git_stash_dist:
    description: "Stash dist folders"
    steps:
      - run:
          name: "Clean packages"
          command: ./node_modules/.bin/lerna clean -y
      - run:
          name: "Clean dist bloat"
          command: rm -rf dist/*.map dist/*.ts dist/*/ packages/*/dist/build/**
      - run:
          name: "Add dist folders"
          command: git add packages/\*/dist/* dist --force
      - run:
          name: "Stash dist folders"
          command: git stash

  do_git_commit_dist:
    description: "Commit dist folders"
    parameters:
      message:
        type: string
        default: "chore(all): add latest build artifacts"
    steps:
      - run:
          name: "Clean existing dist folders"
          command: rm -rf packages/*/dist dist
      - run:
          name: "Pop stashed dist folders"
          command: git stash pop
      - run:
          name: "Add dist folders"
          command: git add packages/\*/dist/* dist --force
      - run:
          name: "Commit dist folders"
          command: git commit -m "<< parameters.message >>"

  do_git_merge:
    description: "Git merge"
    parameters:
      from:
        type: string
        default: "master"
      to:
        type: string
    steps:
      - run:
          name: "Checkout << parameters.to >>"
          command: git checkout << parameters.to >>
      - run:
          name: "Merge << parameters.from >> into << parameters.to >>"
          command: git merge << parameters.from >> --no-ff --no-edit -Xtheirs

  do_git_push:
    description: "Git push"
    parameters:
      to:
        type: string
    steps:
      - run:
          name: "Push << parameters.to >>"
          command: git push origin << parameters.to >>

# - Jobs -
jobs:

  # Must come before any other job
  install_root:
    executor: docker-circleci
    steps:
      - first_npm_install
      - last_save_cache

  # Requires install_root
  build_packages:
    executor: docker-circleci
    steps:
      - first_restore_cache
      - do_build_packages
      - last_persist_workspace

  # Requires install_root
  lint_packages:
    executor: docker-circleci
    steps:
      - first_restore_cache
      - do_lint_packages

  # Requires build_packages
  bundle_packages:
    executor: docker-circleci
    steps:
      - first_attach_workspace
      - do_bundle_packages
      - last_persist_workspace

  # Requires bundle_packages
  merge_and_dist:
    executor: docker-circleci
    parameters:
      to:
        type: string
    steps:
      - first_attach_workspace
      - do_git_set_config
      - do_git_stash_dist
      - do_git_merge:
          to: << parameters.to >>
      - do_git_commit_dist
      - do_git_push:
          to: << parameters.to >>

  job1:
    machine: true
    parameters:
      job1p1:
        type: string
        default: "Default"
    steps:
      - run: echo  "job1p1= << parameters.job1p1 >>"

# - Workflows -
workflows:
  build_test_dev:
    jobs:
      - install_root:
          filters:
            branches:
              ignore:
                - develop
                - release
      - build_packages:
          requires:
            - install_root
          filters:
            branches:
              ignore:
                - develop
                - release
      - lint_packages:
          requires:
            - install_root
          filters:
            branches:
              ignore:
                - develop
                - release
      - bundle_packages:
          requires:
            - build_packages
          filters:
            branches:
              only: master
      - merge_and_dist:
          to: develop
          requires:
            - lint_packages
            - bundle_packages
          filters:
            branches:
              only: master

  # wf2:
  #   triggers:
  #     - schedule:
  #         cron: "0 * * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master

  #   jobs:
  #     - job1:
  #         job1p1: "from wf2"
