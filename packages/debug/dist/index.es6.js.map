{"version":3,"file":"index.es6.js","sources":["../src/binding/binding-context.ts","../src/binding/unparser.ts","../src/reporter.ts","../src/configuration.ts"],"sourcesContent":["import { BindingContext as RuntimeContext, IScope } from '@au-test/runtime';\n\nexport const BindingContext = {\n  ...RuntimeContext,\n  createScopeForTest(bindingContext: any, parentBindingContext?: any): IScope {\n    if (parentBindingContext) {\n      return {\n        bindingContext,\n        overrideContext: this.createOverride(bindingContext, this.createOverride(parentBindingContext))\n      };\n    }\n\n    return {\n      bindingContext,\n      overrideContext: this.createOverride(bindingContext)\n    };\n  }\n};\n","import { Unwrap } from '@au-test/kernel';\nimport * as AST from '@au-test/runtime';\n\nconst astTypeMap = [\n  { type: AST.AccessKeyed, name: 'AccessKeyed' },\n  { type: AST.AccessMember, name: 'AccessMember' },\n  { type: AST.AccessScope, name: 'AccessScope' },\n  { type: AST.AccessThis, name: 'AccessThis' },\n  { type: AST.ArrayBindingPattern, name: 'ArrayBindingPattern' },\n  { type: AST.ArrayLiteral, name: 'ArrayLiteral' },\n  { type: AST.Assign, name: 'Assign' },\n  { type: AST.Binary, name: 'Binary' },\n  { type: AST.BindingBehavior, name: 'BindingBehavior' },\n  { type: AST.BindingIdentifier, name: 'BindingIdentifier' },\n  { type: AST.CallFunction, name: 'CallFunction' },\n  { type: AST.CallMember, name: 'CallMember' },\n  { type: AST.CallScope, name: 'CallScope' },\n  { type: AST.Conditional, name: 'Conditional' },\n  { type: AST.ForOfStatement, name: 'ForOfStatement' },\n  { type: AST.HtmlLiteral, name: 'HtmlLiteral' },\n  { type: AST.Interpolation, name: 'Interpolation' },\n  { type: AST.ObjectBindingPattern, name: 'ObjectBindingPattern' },\n  { type: AST.ObjectLiteral, name: 'ObjectLiteral' },\n  { type: AST.PrimitiveLiteral, name: 'PrimitiveLiteral' },\n  { type: AST.TaggedTemplate, name: 'TaggedTemplate' },\n  { type: AST.Template, name: 'Template' },\n  { type: AST.Unary, name: 'Unary' },\n  { type: AST.ValueConverter, name: 'ValueConverter' }\n];\n\nexport function enableImprovedExpressionDebugging(): void {\n  astTypeMap.forEach(x => adoptDebugMethods(x.type, x.name));\n}\n\n/*@internal*/\nexport function adoptDebugMethods($type: Unwrap<typeof astTypeMap>['type'], name: string): void {\n  $type.prototype.toString = function(): string { return Unparser.unparse(this); };\n}\n\n/*@internal*/\nexport class Unparser implements AST.IVisitor<void> {\n  public text: string = '';\n\n  public static unparse(expr: AST.IExpression): string {\n    const visitor = new Unparser();\n    expr.accept(visitor);\n    return visitor.text;\n  }\n\n  public visitAccessMember(expr: AST.AccessMember): void {\n    expr.object.accept(this);\n    this.text += `.${expr.name}`;\n  }\n\n  public visitAccessKeyed(expr: AST.AccessKeyed): void {\n    expr.object.accept(this);\n    this.text += '[';\n    expr.key.accept(this);\n    this.text += ']';\n  }\n\n  public visitAccessThis(expr: AST.AccessThis): void {\n    if (expr.ancestor === 0) {\n      this.text += '$this';\n      return;\n    }\n    this.text += '$parent';\n    let i = expr.ancestor - 1;\n    while (i--) {\n      this.text += '.$parent';\n    }\n  }\n\n  public visitAccessScope(expr: AST.AccessScope): void {\n    let i = expr.ancestor;\n    while (i--) {\n      this.text += '$parent.';\n    }\n    this.text += expr.name;\n  }\n\n  public visitArrayLiteral(expr: AST.ArrayLiteral): void {\n    const elements = expr.elements;\n    this.text += '[';\n    for (let i = 0, length = elements.length; i < length; ++i) {\n      if (i !== 0) {\n        this.text += ',';\n      }\n      elements[i].accept(this);\n    }\n    this.text += ']';\n  }\n\n  public visitObjectLiteral(expr: AST.ObjectLiteral): void {\n    const keys = expr.keys;\n    const values = expr.values;\n    this.text += '{';\n    for (let i = 0, length = keys.length; i < length; ++i) {\n      if (i !== 0) {\n        this.text += ',';\n      }\n      this.text += `'${keys[i]}':`;\n      values[i].accept(this);\n    }\n    this.text += '}';\n  }\n\n  public visitPrimitiveLiteral(expr: AST.PrimitiveLiteral): void {\n    this.text += '(';\n    if (typeof expr.value === 'string') {\n      const escaped = expr.value.replace(/'/g, '\\'');\n      this.text += `'${escaped}'`;\n    } else {\n      this.text += `${expr.value}`;\n    }\n    this.text += ')';\n  }\n\n  public visitCallFunction(expr: AST.CallFunction): void {\n    this.text += '(';\n    expr.func.accept(this);\n    this.writeArgs(expr.args);\n    this.text += ')';\n  }\n\n  public visitCallMember(expr: AST.CallMember): void {\n    this.text += '(';\n    expr.object.accept(this);\n    this.text += `.${expr.name}`;\n    this.writeArgs(expr.args);\n    this.text += ')';\n  }\n\n  public visitCallScope(expr: AST.CallScope): void {\n    this.text += '(';\n    let i = expr.ancestor;\n    while (i--) {\n      this.text += '$parent.';\n    }\n    this.text += expr.name;\n    this.writeArgs(expr.args);\n    this.text += ')';\n  }\n\n  public visitTemplate(expr: AST.Template): void {\n    const { cooked, expressions } = expr;\n    const length = expressions.length;\n    this.text += '`';\n    this.text += cooked[0];\n    for (let i = 0; i < length; i++) {\n      expressions[i].accept(this);\n      this.text += cooked[i + 1];\n    }\n    this.text += '`';\n  }\n\n  public visitTaggedTemplate(expr: AST.TaggedTemplate): void {\n    const { cooked, expressions } = expr;\n    const length = expressions.length;\n    expr.func.accept(this);\n    this.text += '`';\n    this.text += cooked[0];\n    for (let i = 0; i < length; i++) {\n      expressions[i].accept(this);\n      this.text += cooked[i + 1];\n    }\n    this.text += '`';\n  }\n\n  public visitUnary(expr: AST.Unary): void {\n    this.text += `(${expr.operation}`;\n    if (expr.operation.charCodeAt(0) >= /*a*/97) {\n      this.text += ' ';\n    }\n    expr.expression.accept(this);\n    this.text += ')';\n  }\n\n  public visitBinary(expr: AST.Binary): void {\n    this.text += '(';\n    expr.left.accept(this);\n    if (expr.operation.charCodeAt(0) === /*i*/105) {\n      this.text += ` ${expr.operation} `;\n    } else {\n      this.text += expr.operation;\n    }\n    expr.right.accept(this);\n    this.text += ')';\n  }\n\n  public visitConditional(expr: AST.Conditional): void {\n    this.text += '(';\n    expr.condition.accept(this);\n    this.text += '?';\n    expr.yes.accept(this);\n    this.text += ':';\n    expr.no.accept(this);\n    this.text += ')';\n  }\n\n  public visitAssign(expr: AST.Assign): void {\n    this.text += '(';\n    expr.target.accept(this);\n    this.text += '=';\n    expr.value.accept(this);\n    this.text += ')';\n  }\n\n  public visitValueConverter(expr: AST.ValueConverter): void {\n    const args = expr.args;\n    expr.expression.accept(this);\n    this.text += `|${expr.name}`;\n    for (let i = 0, length = args.length; i < length; ++i) {\n      this.text += ':';\n      args[i].accept(this);\n    }\n  }\n\n  public visitBindingBehavior(expr: AST.BindingBehavior): void {\n    const args = expr.args;\n    expr.expression.accept(this);\n    this.text += `&${expr.name}`;\n    for (let i = 0, length = args.length; i < length; ++i) {\n      this.text += ':';\n      args[i].accept(this);\n    }\n  }\n\n  public visitArrayBindingPattern(expr: AST.ArrayBindingPattern): void {\n    const elements = expr.elements;\n    this.text += '[';\n    for (let i = 0, length = elements.length; i < length; ++i) {\n      if (i !== 0) {\n        this.text += ',';\n      }\n      elements[i].accept(this);\n    }\n    this.text += ']';\n  }\n\n  public visitObjectBindingPattern(expr: AST.ObjectBindingPattern): void {\n    const keys = expr.keys;\n    const values = expr.values;\n    this.text += '{';\n    for (let i = 0, length = keys.length; i < length; ++i) {\n      if (i !== 0) {\n        this.text += ',';\n      }\n      this.text += `'${keys[i]}':`;\n      values[i].accept(this);\n    }\n    this.text += '}';\n  }\n\n  public visitBindingIdentifier(expr: AST.BindingIdentifier): void {\n    this.text += expr.name;\n  }\n\n  public visitHtmlLiteral(expr: AST.HtmlLiteral): void { throw new Error('visitHtmlLiteral'); }\n\n  public visitForOfStatement(expr: AST.ForOfStatement): void {\n    expr.declaration.accept(this);\n    this.text += ' of ';\n    expr.iterable.accept(this);\n  }\n\n  public visitInterpolation(expr: AST.Interpolation): void {\n    const { parts, expressions } = expr;\n    const length = expressions.length;\n    this.text += '${';\n    this.text += parts[0];\n    for (let i = 0; i < length; i++) {\n      expressions[i].accept(this);\n      this.text += parts[i + 1];\n    }\n    this.text += '}';\n  }\n\n  private writeArgs(args: ReadonlyArray<AST.IExpression>): void {\n    this.text += '(';\n    for (let i = 0, length = args.length; i < length; ++i) {\n      if (i !== 0) {\n        this.text += ',';\n      }\n      args[i].accept(this);\n    }\n    this.text += ')';\n  }\n}\n\n/*@internal*/\nexport class Serializer implements AST.IVisitor<string> {\n  public static serialize(expr: AST.IExpression): string {\n    const visitor = new Serializer();\n    if (expr === null || expr === undefined || typeof expr.accept !== 'function') {\n      return `${expr}`;\n    }\n    return expr.accept(visitor);\n  }\n\n  public visitAccessMember(expr: AST.AccessMember): string {\n    return `{\"type\":\"AccessMember\",\"name\":${expr.name},\"object\":${expr.object.accept(this)}}`;\n  }\n\n  public visitAccessKeyed(expr: AST.AccessKeyed): string {\n    return `{\"type\":\"AccessKeyed\",\"object\":${expr.object.accept(this)},\"key\":${expr.key.accept(this)}}`;\n  }\n\n  public visitAccessThis(expr: AST.AccessThis): string {\n    return `{\"type\":\"AccessThis\",\"ancestor\":${expr.ancestor}}`;\n  }\n\n  public visitAccessScope(expr: AST.AccessScope): string {\n    return `{\"type\":\"AccessScope\",\"name\":\"${expr.name}\",\"ancestor\":${expr.ancestor}}`;\n  }\n\n  public visitArrayLiteral(expr: AST.ArrayLiteral): string {\n    return `{\"type\":\"ArrayLiteral\",\"elements\":${this.serializeExpressions(expr.elements)}}`;\n  }\n\n  public visitObjectLiteral(expr: AST.ObjectLiteral): string {\n    return `{\"type\":\"ObjectLiteral\",\"keys\":${serializePrimitives(expr.keys)},\"values\":${this.serializeExpressions(expr.values)}}`;\n  }\n\n  public visitPrimitiveLiteral(expr: AST.PrimitiveLiteral): string {\n    return `{\"type\":\"PrimitiveLiteral\",\"value\":${serializePrimitive(expr.value)}}`;\n  }\n\n  public visitCallFunction(expr: AST.CallFunction): string {\n    return `{\"type\":\"CallFunction\",\"func\":${expr.func.accept(this)},\"args\":${this.serializeExpressions(expr.args)}}`;\n  }\n\n  public visitCallMember(expr: AST.CallMember): string {\n    return `{\"type\":\"CallMember\",\"name\":\"${expr.name}\",\"object\":${expr.object.accept(this)},\"args\":${this.serializeExpressions(expr.args)}}`;\n  }\n\n  public visitCallScope(expr: AST.CallScope): string {\n    return `{\"type\":\"CallScope\",\"name\":\"${expr.name}\",\"ancestor\":${expr.ancestor},\"args\":${this.serializeExpressions(expr.args)}}`;\n  }\n\n  public visitTemplate(expr: AST.Template): string {\n    return `{\"type\":\"Template\",\"cooked\":${serializePrimitives(expr.cooked)},\"expressions\":${this.serializeExpressions(expr.expressions)}}`;\n  }\n\n  public visitTaggedTemplate(expr: AST.TaggedTemplate): string {\n    return `{\"type\":\"TaggedTemplate\",\"cooked\":${serializePrimitives(expr.cooked)},\"raw\":${serializePrimitives(expr.cooked.raw)},\"expressions\":${this.serializeExpressions(expr.expressions)}}`;\n  }\n\n  public visitUnary(expr: AST.Unary): string {\n    return `{\"type\":\"Unary\",\"operation\":\"${expr.operation}\",\"expression\":${expr.expression.accept(this)}}`;\n  }\n\n  public visitBinary(expr: AST.Binary): string {\n    return `{\"type\":\"Binary\",\"operation\":\"${expr.operation}\",\"left\":${expr.left.accept(this)},\"right\":${expr.right.accept(this)}}`;\n  }\n\n  public visitConditional(expr: AST.Conditional): string {\n    return `{\"type\":\"Conditional\",\"condition\":${expr.condition.accept(this)},\"yes\":${expr.yes.accept(this)},\"no\":${expr.no.accept(this)}}`;\n  }\n\n  public visitAssign(expr: AST.Assign): string {\n    return `{\"type\":\"Assign\",\"target\":${expr.target.accept(this)},\"value\":${expr.value.accept(this)}}`;\n  }\n\n  public visitValueConverter(expr: AST.ValueConverter): string {\n    return `{\"type\":\"ValueConverter\",\"name\":\"${expr.name}\",\"expression\":${expr.expression.accept(this)},\"args\":${this.serializeExpressions(expr.args)}}`;\n  }\n\n  public visitBindingBehavior(expr: AST.BindingBehavior): string {\n    return `{\"type\":\"BindingBehavior\",\"name\":\"${expr.name}\",\"expression\":${expr.expression.accept(this)},\"args\":${this.serializeExpressions(expr.args)}}`;\n  }\n\n  public visitArrayBindingPattern(expr: AST.ArrayBindingPattern): string {\n    return `{\"type\":\"ArrayBindingPattern\",\"elements\":${this.serializeExpressions(expr.elements)}}`;\n  }\n\n  public visitObjectBindingPattern(expr: AST.ObjectBindingPattern): string {\n    return `{\"type\":\"ObjectBindingPattern\",\"keys\":${serializePrimitives(expr.keys)},\"values\":${this.serializeExpressions(expr.values)}}`;\n  }\n\n  public visitBindingIdentifier(expr: AST.BindingIdentifier): string {\n    return `{\"type\":\"BindingIdentifier\",\"name\":\"${expr.name}\"}`;\n  }\n\n  public visitHtmlLiteral(expr: AST.HtmlLiteral): string { throw new Error('visitHtmlLiteral'); }\n\n  public visitForOfStatement(expr: AST.ForOfStatement): string {\n    return `{\"type\":\"ForOfStatement\",\"declaration\":${expr.declaration.accept(this)},\"iterable\":${expr.iterable.accept(this)}}`;\n  }\n\n  public visitInterpolation(expr: AST.Interpolation): string {\n    return `{\"type\":\"Interpolation\",\"cooked\":${serializePrimitives(expr.parts)},\"expressions\":${this.serializeExpressions(expr.expressions)}}`;\n  }\n\n  // tslint:disable-next-line:no-any\n  private serializeExpressions(args: ReadonlyArray<AST.IExpression>): string {\n    let text = '[';\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      if (i !== 0) {\n        text += ',';\n      }\n      text += args[i].accept(this);\n    }\n    text += ']';\n    return text;\n  }\n}\n\n  // tslint:disable-next-line:no-any\nfunction serializePrimitives(values: ReadonlyArray<any>): string {\n  let text = '[';\n  for (let i = 0, ii = values.length; i < ii; ++i) {\n    if (i !== 0) {\n      text += ',';\n    }\n    text += serializePrimitive(values[i]);\n  }\n  text += ']';\n  return text;\n}\n\n  // tslint:disable-next-line:no-any\nfunction serializePrimitive(value: any): string {\n  if (typeof value === 'string') {\n    return `\"\\\\\"${escapeString(value)}\\\\\"\"`;\n  } else if (value === null || value === undefined) {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\nfunction escapeString(str: string): string {\n  let ret = '';\n  for (let i = 0, ii = str.length; i < ii; ++i) {\n    ret += escape(str.charAt(i));\n  }\n  return ret;\n}\n\nfunction escape(ch: string): string {\n  switch (ch) {\n    case '\\b': return '\\\\b';\n    case '\\t': return '\\\\t';\n    case '\\n': return '\\\\n';\n    case '\\v': return '\\\\v';\n    case '\\f': return '\\\\f';\n    case '\\r': return '\\\\r';\n    case '\\\"': return '\\\\\"';\n    case '\\'': return '\\\\\\'';\n    case '\\\\': return '\\\\\\\\';\n    default: return ch;\n  }\n}\n","import { Reporter as RuntimeReporter } from '@au-test/kernel';\n\nconst enum MessageType {\n  error,\n  warn,\n  info,\n  debug\n}\n\ninterface IMessageInfo {\n  message: string;\n  // tslint:disable-next-line:no-reserved-keywords\n  type: MessageType;\n}\n\nexport const Reporter: typeof RuntimeReporter = {...RuntimeReporter,\n  write(code: number, ...params: any[]): void {\n    const info = getMessageInfoForCode(code);\n\n    switch (info.type) {\n      case MessageType.debug:\n        console.debug(info.message, ...params);\n        break;\n      case MessageType.info:\n        console.info(info.message, ...params);\n        break;\n      case MessageType.warn:\n        console.warn(info.message, ...params);\n        break;\n      case MessageType.error:\n        throw this.error(code, ...params);\n    }\n  },\n  error(code: number, ...params: any[]): Error {\n    const info = getMessageInfoForCode(code);\n    const error = new Error(info.message);\n    (<any>error).data = params;\n    return error;\n  }};\n\nfunction getMessageInfoForCode(code: number): IMessageInfo {\n  return codeLookup[code] || createInvalidCodeMessageInfo(code);\n}\n\nfunction createInvalidCodeMessageInfo(code: number): IMessageInfo {\n  return {\n    type: MessageType.error,\n    message: `Attempted to report with unknown code ${code}.`\n  };\n}\n\nconst codeLookup: Record<string, IMessageInfo> = {\n  0: {\n    type: MessageType.warn,\n    message: 'Cannot add observers to object.'\n  },\n  1: {\n    type: MessageType.warn,\n    message: 'Cannot observe property of object.'\n  },\n  2: {\n    type: MessageType.info,\n    message: 'Starting application in debug mode.'\n  },\n  3: {\n    type: MessageType.error,\n    message: 'Runtime expression compilation is only available when including JIT support.'\n  },\n  4: {\n    type: MessageType.error,\n    message: 'Invalid animation direction.'\n  },\n  5: {\n    type: MessageType.error,\n    message: 'key/value cannot be null or undefined. Are you trying to inject/register something that doesn\\'t exist with DI?'\n  },\n  6: {\n    type: MessageType.error,\n    message: 'Invalid resolver strategy specified.'\n  },\n  7: {\n    type: MessageType.error,\n    message: 'Constructor Parameter with index cannot be null or undefined. Are you trying to inject/register something that doesn\\'t exist with DI?'\n  },\n  8: {\n    type: MessageType.error,\n    message: 'Self binding behavior only supports events.'\n  },\n  9: {\n    type: MessageType.error,\n    message: 'The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind=\"firstName & updateTrigger:\\'blur\\'\">'\n  },\n  10: {\n    type: MessageType.error,\n    message: 'The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.'\n  },\n  11: {\n    type: MessageType.error,\n    message: 'Only property bindings and string interpolation bindings can be signaled. Trigger, delegate and call bindings cannot be signaled.'\n  },\n  12: {\n    type: MessageType.error,\n    message: 'Signal name is required.'\n  },\n  14: {\n    type: MessageType.error,\n    message: 'Property cannot be assigned.'\n  },\n  15: {\n    type: MessageType.error,\n    message: 'Unexpected call context.'\n  },\n  16: {\n    type: MessageType.error,\n    message: 'Only one child observer per content view is supported for the life of the content view.'\n  },\n  17: {\n    type: MessageType.error,\n    message: 'You can only define one default implementation for an interface.'\n  },\n  18: {\n    type: MessageType.error,\n    message: 'You cannot observe a setter only property.'\n  },\n  19: {\n    type: MessageType.error,\n    message: 'Value for expression is non-repeatable.'\n  },\n  20: {\n    type: MessageType.error,\n    message: 'No template compiler found with the specified name. JIT support or a custom compiler is required.'\n  },\n  21: {\n    type: MessageType.error,\n    message: 'You cannot combine the containerless custom element option with Shadow DOM.'\n  },\n  22: {\n    type: MessageType.error,\n    message: 'A containerless custom element cannot be the root component of an application.'\n  },\n  30: {\n    type: MessageType.error,\n    message: 'There are more targets than there are target instructions.'\n  },\n  31: {\n    type: MessageType.error,\n    message: 'There are more target instructions than there are targets.'\n  },\n  100: {\n    type: MessageType.error,\n    message: 'Invalid start of expression.'\n  },\n  101: {\n    type: MessageType.error,\n    message: 'Unconsumed token.'\n  },\n  102: {\n    type: MessageType.error,\n    message: 'Double dot and spread operators are not supported.'\n  },\n  103: {\n    type: MessageType.error,\n    message: 'Invalid member expression.'\n  },\n  104: {\n    type: MessageType.error,\n    message: 'Unexpected end of expression.'\n  },\n  105: {\n    type: MessageType.error,\n    message: 'Expected identifier.'\n  },\n  106: {\n    type: MessageType.error,\n    message: 'Invalid BindingIdentifier at left hand side of \"of\".'\n  },\n  107: {\n    type: MessageType.error,\n    message: 'Invalid or unsupported property definition in object literal.'\n  },\n  108: {\n    type: MessageType.error,\n    message: 'Unterminated quote in string literal.'\n  },\n  109: {\n    type: MessageType.error,\n    message: 'Unterminated template string.'\n  },\n  110: {\n    type: MessageType.error,\n    message: 'Missing expected token.'\n  },\n  111: {\n    type: MessageType.error,\n    message: 'Unexpected character.'\n  },\n  150: {\n    type: MessageType.error,\n    message: 'Left hand side of expression is not assignable.'\n  },\n  151: {\n    type: MessageType.error,\n    message: 'Unexpected keyword \"of\"'\n  }\n};\n","import { IContainer, Reporter as RuntimeReporter } from '@au-test/kernel';\nimport { enableImprovedExpressionDebugging } from './binding/unparser';\nimport { Reporter } from './reporter';\n\nexport const DebugConfiguration = {\n  register(container: IContainer): void {\n    Reporter.write(2);\n    Object.assign(RuntimeReporter, Reporter);\n    enableImprovedExpressionDebugging();\n  }\n};\n"],"names":["BindingContext","RuntimeContext","AST.AccessKeyed","AST.AccessMember","AST.AccessScope","AST.AccessThis","AST.ArrayBindingPattern","AST.ArrayLiteral","AST.Assign","AST.Binary","AST.BindingBehavior","AST.BindingIdentifier","AST.CallFunction","AST.CallMember","AST.CallScope","AST.Conditional","AST.ForOfStatement","AST.HtmlLiteral","AST.Interpolation","AST.ObjectBindingPattern","AST.ObjectLiteral","AST.PrimitiveLiteral","AST.TaggedTemplate","AST.Template","AST.Unary","AST.ValueConverter","Reporter","RuntimeReporter"],"mappings":"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"}